(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> invalid literal for long() with base 10: 'undefined'"
p3
sS'layer'
p4
S'/Users/Nick/Desktop/cs183/web2py-1/applications/scheduler/controllers/manager.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - api is an example of Hypermedia API support and access control\n#########################################################################\nimport json\n\n\ndef index():\n    """\n    Index: shows user schedules\n    """\n    classList = []\n    for c in db(db.klass).select():\n        classList.append(c.title) \n\n    return locals()\n\ndef manage():\n    """\n    Network: create network\n    """\n    networks = []\n    for network in db(db.network).select():\n        networks.append({\n            "network_id": str(network.id),\n            "title": network.title,\n            })\n    return locals()\n\ndef createNetwork():\n    if request.env.request_method!=\'POST\': raise HTTP(400)\n    post = request.post_vars\n    db.network.insert(title = post.title)\n    response = {\n        \'title\': post.title, \n    }\n    return json.dumps(response)\n\ndef viewNetwork():\n    if request.env.request_method!=\'GET\': raise HTTP(400)\n    network_id =request.vars.id\n    terms = db(db.network_term.network_id==network_id).select()\n    termList = []\n    for t in terms:\n        term = db(db.term.id==t.term_id).select().first()\n        termList.append({\n            "term_id": str(term.id),\n            "title":term.title,\n        })\n    return json.dumps(termList)\n\ndef createTerm():\n    if request.env.request_method!=\'POST\': raise HTTP(400)\n    post = request.post_vars\n    term = db.term.insert(title = post.title)\n    db.network_term.insert(network_id = post.network_id, term_id = term.id)\n    response = {\n        \'network_id\': str(post.network_id),\n        \'title\': post.title,\n    }\n    return json.dumps(response)\n\ndef viewTerm():\n    if request.env.request_method!=\'GET\': raise HTTP(400)\n    term_id =request.vars.id\n    klasses = db(db.class_term.term_id==term_id).select()\n    klassList = []\n    for k in klasses:\n        klass = db(db.klass.id==k.klass_id).select().first()\n        klassList.append({\n            "klass_id": str(klass.id),\n            "title":klass.title,\n        })\n    return json.dumps(klassList)\n\ndef createKlass():\n    if request.env.request_method!=\'POST\': raise HTTP(400)\n    post = request.post_vars\n    #Teacher Stuff first\n    teacher = db(db.teacher).update(name = post.teacher) or db.teacher.insert(name = post.teacher)\n    teacher_id = teacher.id\n    klass = db.klass.insert(title = post.title, teacher_id = teacher_id)\n    db.class_term.insert(klass_id = klass.id, term_id = post.term_id)\n    response = {\n        \'term_id\': str(post.term_id),\n        \'title\': post.title,\n        \'teacher\': post.teacher,\n    }\n    return json.dumps(response)\n\n\nresponse._vars=response._caller(viewTerm)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/Users/Nick/Desktop/cs183/web2py-1/gluon/restricted.py", line 224, in restricted\n    exec ccode in environment\n  File "/Users/Nick/Desktop/cs183/web2py-1/applications/scheduler/controllers/manager.py", line 98, in <module>\n  File "/Users/Nick/Desktop/cs183/web2py-1/gluon/globals.py", line 393, in <lambda>\n    self._caller = lambda f: f()\n  File "/Users/Nick/Desktop/cs183/web2py-1/applications/scheduler/controllers/manager.py", line 72, in viewTerm\n    klasses = db(db.class_term.term_id==term_id).select()\n  File "/Users/Nick/Desktop/cs183/web2py-1/gluon/dal/objects.py", line 2066, in select\n    return adapter.select(self.query,fields,attributes)\n  File "/Users/Nick/Desktop/cs183/web2py-1/gluon/dal/adapters/sqlite.py", line 125, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "/Users/Nick/Desktop/cs183/web2py-1/gluon/dal/adapters/base.py", line 1219, in select\n    sql = self._select(query, fields, attributes)\n  File "/Users/Nick/Desktop/cs183/web2py-1/gluon/dal/adapters/base.py", line 1117, in _select\n    sql_w = \' WHERE \' + self.expand(query) if query else \'\'\n  File "/Users/Nick/Desktop/cs183/web2py-1/gluon/dal/adapters/base.py", line 897, in expand\n    out = op(first, second, **optional_args)\n  File "/Users/Nick/Desktop/cs183/web2py-1/gluon/dal/adapters/base.py", line 794, in EQ\n    self.expand(second, first.type))\n  File "/Users/Nick/Desktop/cs183/web2py-1/gluon/dal/adapters/base.py", line 908, in expand\n    return str(self.represent(expression,field_type))\n  File "/Users/Nick/Desktop/cs183/web2py-1/gluon/dal/adapters/base.py", line 1364, in represent\n    return str(long(obj))\nValueError: invalid literal for long() with base 10: \'undefined\'\n'
p11
s.