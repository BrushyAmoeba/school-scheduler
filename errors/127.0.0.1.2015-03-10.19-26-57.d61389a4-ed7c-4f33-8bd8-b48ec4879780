(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> invalid literal for long() with base 10: 'undefined'"
p3
sS'layer'
p4
S'/Users/Nick/Desktop/cs183/web2py-1/applications/scheduler/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - api is an example of Hypermedia API support and access control\n#########################################################################\nimport json\n\n\ndef index():\n    """\n    Index: shows user schedules\n    """\n    classList = []\n    for c in db(db.klass).select():\n        classList.append(c.title) \n\n    return locals()\n\ndef network():\n    """\n    Network: create network\n    """\n    networks = []\n    for network in db(db.network).select():\n        networks.append({\n            "title": network.title,\n            })\n    return locals()\n\ndef viewNetwork():\n    if request.env.request_method!=\'GET\': raise HTTP(400)\n    network_id =request.vars.id\n    terms = db(db.network_term.network_id==network_id).select()\n    termList = []\n    for term in terms:\n        db(db.term.id==term.term_id).select().first()\n        termList.append({\n            "title":term.title,\n        })\n    return json.dumps(termList)\n\ndef createNetwork():\n    if request.env.request_method!=\'POST\': raise HTTP(400)\n    post = request.post_vars\n    db.network.insert(title = post.title)\n    response = {\n        \'title\': post.title, \n    }\n    return json.dumps(response)\n\n\ndef getTimeslots():\n  if request.env.request_method!=\'GET\': raise HTTP(400)\n  me = auth.user_id\n  student_classes = db(db.class_student.student == auth.user).select()\n  timeslotList = []\n  for c in student_classes:\n      klass_timeslots = db(db.class_timeslot.klass_id == c.klass_id).select()\n      for k in klass_timeslots:\n        t_id = k.timeslot_id\n        k_id = k.klass_id\n        timeslot = db(db.timeslot.id == t_id).select().first()\n        klass = db(db.klass.id == k_id).select().first()\n        teacher_id = db(db.teacher_class.klass_id == k_id).select().first().teacher_id\n        teacher = db(db.teacher.id == teacher_id).select().first().name\n        timeslotDict = {\n          "title":klass.title,\n          "teacher":teacher,\n          "meet_day":timeslot.meet_day,\n          "start_time":timeslot.start_time.isoformat(),\n          "end_time":timeslot.end_time.isoformat(),\n        }\n        timeslotList.append(timeslotDict)\n  return json.dumps(timeslotList)\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_login() \ndef api():\n    """\n    this is example of API with access control\n    WEB2PY provides Hypermedia API (Collection+JSON) Experimental\n    """\n    from gluon.contrib.hypermedia import Collection\n    rules = {\n        \'<tablename>\': {\'GET\':{},\'POST\':{},\'PUT\':{},\'DELETE\':{}},\n        }\n    return Collection(db).process(request,response,rules)\n\nresponse._vars=response._caller(viewNetwork)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/Users/Nick/Desktop/cs183/web2py-1/gluon/restricted.py", line 224, in restricted\n    exec ccode in environment\n  File "/Users/Nick/Desktop/cs183/web2py-1/applications/scheduler/controllers/default.py", line 130, in <module>\n  File "/Users/Nick/Desktop/cs183/web2py-1/gluon/globals.py", line 393, in <lambda>\n    self._caller = lambda f: f()\n  File "/Users/Nick/Desktop/cs183/web2py-1/applications/scheduler/controllers/default.py", line 38, in viewNetwork\n    terms = db(db.network_term.network_id==network_id).select()\n  File "/Users/Nick/Desktop/cs183/web2py-1/gluon/dal/objects.py", line 2066, in select\n    return adapter.select(self.query,fields,attributes)\n  File "/Users/Nick/Desktop/cs183/web2py-1/gluon/dal/adapters/sqlite.py", line 125, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "/Users/Nick/Desktop/cs183/web2py-1/gluon/dal/adapters/base.py", line 1219, in select\n    sql = self._select(query, fields, attributes)\n  File "/Users/Nick/Desktop/cs183/web2py-1/gluon/dal/adapters/base.py", line 1117, in _select\n    sql_w = \' WHERE \' + self.expand(query) if query else \'\'\n  File "/Users/Nick/Desktop/cs183/web2py-1/gluon/dal/adapters/base.py", line 897, in expand\n    out = op(first, second, **optional_args)\n  File "/Users/Nick/Desktop/cs183/web2py-1/gluon/dal/adapters/base.py", line 794, in EQ\n    self.expand(second, first.type))\n  File "/Users/Nick/Desktop/cs183/web2py-1/gluon/dal/adapters/base.py", line 908, in expand\n    return str(self.represent(expression,field_type))\n  File "/Users/Nick/Desktop/cs183/web2py-1/gluon/dal/adapters/base.py", line 1364, in represent\n    return str(long(obj))\nValueError: invalid literal for long() with base 10: \'undefined\'\n'
p11
s.