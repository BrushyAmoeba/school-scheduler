(dp1
S'output'
p2
S"<type 'exceptions.RuntimeError'> No table selected"
p3
sS'layer'
p4
S'/Users/Nick/Desktop/cs183/web2py-1/applications/scheduler/controllers/manager.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - api is an example of Hypermedia API support and access control\n#########################################################################\nimport json\nimport time\n\n\ndef index():\n    """\n    Index: shows user schedules\n    """\n    classList = []\n    for c in db(db.klass).select():\n        classList.append(c.title) \n\n    return locals()\n\ndef manage():\n    """\n    Network: create network\n    """\n    networks = []\n    for network in db(db.network).select():\n        networks.append({\n            "network_id": str(network.id),\n            "title": network.title,\n            })\n    return locals()\n\ndef createNetwork():\n    if request.env.request_method!=\'POST\': raise HTTP(400)\n    post = request.post_vars\n    db.network.insert(title = post.title)\n    response = {\n        \'title\': post.title, \n    }\n    return json.dumps(response)\n\ndef viewNetwork():\n    if request.env.request_method!=\'GET\': raise HTTP(400)\n    network_id =request.vars.id\n    terms = db(db.network_term.network_id==network_id).select()\n    termList = []\n    for t in terms:\n        term = db(db.term.id==t.term_id).select().first()\n        termList.append({\n            "term_id": str(term.id),\n            "title":term.title,\n        })\n    return json.dumps(termList)\n\ndef createTerm():\n    if request.env.request_method!=\'POST\': raise HTTP(400)\n    post = request.post_vars\n    term = db.term.insert(title = post.title)\n    db.network_term.insert(network_id = post.network_id, term_id = term.id)\n    response = {\n        \'network_id\': str(post.network_id),\n        \'title\': post.title,\n    }\n    return json.dumps(response)\n\ndef viewTerm():\n    if request.env.request_method!=\'GET\': raise HTTP(400)\n    term_id =request.vars.id\n    klasses = db(db.class_term.term_id==term_id).select()\n    klassList = []\n    for k in klasses:\n        klass = db(db.klass.id==k.klass_id).select().first()\n        klassList.append({\n            "klass_id": str(klass.id),\n            "title":klass.title,\n        })\n    return json.dumps(klassList)\n\ndef createKlass():\n    if request.env.request_method!=\'POST\': raise HTTP(400)\n    post = request.post_vars\n    #Teacher Stuff first\n    teacher_id = db(db.teacher.name==post.teacher).update(name = post.teacher) or db.teacher.insert(name = post.teacher)\n    klass_id = db.klass.insert(title = post.title, teacher_id = teacher_id)\n    db.class_term.insert(klass_id = klass_id, term_id = post.term_id)\n    response = {\n        \'term_id\': str(post.term_id),\n        \'title\': post.title,\n        \'teacher\': post.teacher,\n    }\n    return json.dumps(response)\n\ndef viewKlass():\n    if request.env.request_method!=\'GET\': raise HTTP(400)\n    klass_id =request.vars.id\n    timeslots = db(db.class_timeslot.klass_id==klass_id).select()\n    timeslotList = []\n    for t in timeslots:\n        timeslot = db(db.timeslot.id==t.timeslot_id).select().first()\n        timeslotList.append({\n            "timeslot_id": str(timeslot.id),\n            "meet_day":timeslot.meet_day,\n            "start_time":1,\n            "end_time":2,\n        })\n    return json.dumps(timeslotList)\n\ndef createTimeslot():\n    if request.env.request_method!=\'POST\': raise HTTP(400)\n    post = request.post_vars\n    start_time = time.strptime(post.start, \'%H:%M:%S\')\n    end_time = time.strptime(post.end, \'%H:%M:%S\')\n    print(start_time)\n    print(end_time)\n    query = db.timeslot.meet_day==post.meet_day, db.timeslot.start_time == start_time, db.timeslot.end_time == end_time \n    timeslot_id = db(query).update(meet_day = post.meet_day, start_time = start_time, end_time = end_time) or  db.timeslot.insert(meet_day = post.meet_day, start_time = start_time, end_time = end_time)\n    db.class_timeslot.insert(timeslot_id = timeslot_id, klass_id = post.klass_id)\n    response = {\n        \'meet_day\': post.meet_day,\n        \'start\': post.start,\n        \'end\': post.end,\n        \'klass_id\': str(post.klass_id),     \n    }\n    return json.dumps(response)\n\nresponse._vars=response._caller(createTimeslot)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/Users/Nick/Desktop/cs183/web2py-1/gluon/restricted.py", line 224, in restricted\n    exec ccode in environment\n  File "/Users/Nick/Desktop/cs183/web2py-1/applications/scheduler/controllers/manager.py", line 130, in <module>\n  File "/Users/Nick/Desktop/cs183/web2py-1/gluon/globals.py", line 393, in <lambda>\n    self._caller = lambda f: f()\n  File "/Users/Nick/Desktop/cs183/web2py-1/applications/scheduler/controllers/manager.py", line 120, in createTimeslot\n    timeslot_id = db(query).update(meet_day = post.meet_day, start_time = start_time, end_time = end_time) or  db.timeslot.insert(meet_day = post.meet_day, start_time = start_time, end_time = end_time)\n  File "/Users/Nick/Desktop/cs183/web2py-1/gluon/dal/objects.py", line 2082, in update\n    tablename = db._adapter.get_table(self.query)\n  File "/Users/Nick/Desktop/cs183/web2py-1/gluon/dal/adapters/base.py", line 1006, in get_table\n    raise RuntimeError("No table selected")\nRuntimeError: No table selected\n'
p11
s.